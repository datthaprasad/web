{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\WEB_MINI_PROJECT\\\\web\\\\ReactJS\\\\src\\\\Hooks\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./Form.css\";\nimport ErrorModel from '../UIelements/Error';\nimport LoadingSpinner from '../UIelements/LoadingSpinner';\nimport { useHttpClient } from \"./Http-Hook\";\n\nconst Form = () => {\n  _s();\n\n  const [pass_error, seterror] = useState();\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError,\n    headers\n  } = useHttpClient();\n  const [header, setHeader] = useState();\n\n  const formHandler = async event => {\n    event.preventDefault();\n    const title = document.getElementById('title').value;\n    const id = document.getElementById('id').value;\n    const type = document.getElementById('type').value;\n    const short = document.getElementById('short').value;\n    const long = document.getElementById('long').value;\n\n    if (String(title).length === 0) {\n      seterror(\"Title can not be empty\");\n      setHeader(\"Please fill all data\");\n      return;\n    } else if (String(type).length === 0) {\n      seterror(\"Type can not be empty\");\n      setHeader(\"Please fill all data\");\n      return;\n    } else if (!(String(type).toLowerCase() === \"aptitude\" || String(type).toLowerCase() === \"technical\" || String(type).toLowerCase() === \"hr\")) {\n      seterror(\"select course type between Aptitude/Technical/HR\");\n      setHeader(\"Course type error\");\n      return;\n    } else if (String(id).length === 0) {\n      seterror(\"Id can not be empty\");\n      setHeader(\"Please fill all data\");\n      return;\n    } else if (String(short).length === 0) {\n      seterror(\"Short Description can not be empty\");\n      setHeader(\"Please fill all data\");\n      return;\n    }\n\n    let data;\n\n    try {\n      data = await sendRequest(`http://localhost:5000/course-upload`, 'POST', {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        title: title,\n        id: id,\n        type: type,\n        short: short,\n        long: long\n      }));\n\n      if (data === \"successfull\") {\n        seterror(\"given course stored succefully\");\n        setHeader(\"Successfully Uploaded\");\n      }\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [pass_error && /*#__PURE__*/_jsxDEV(ErrorModel, {\n      header: header,\n      error: pass_error,\n      onClear: () => {\n        seterror();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 27\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorModel, {\n      header: headers,\n      error: error,\n      onClear: clearError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 23\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n      asOverlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Add new Course\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drive-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-fields\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input\",\n            id: \"title\",\n            placeholder: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input\",\n            id: \"type\",\n            placeholder: \"Type (Aptitude/Technical/HR)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input\",\n            id: \"id\",\n            placeholder: \"YouTube ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input\",\n            id: \"short\",\n            placeholder: \"Short description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"msg\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            style: {\n              \"border\": \"solid 1px white\"\n            },\n            id: \"long\",\n            placeholder: \"Additional Description (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btns\",\n            style: {\n              textAlign: \"center\"\n            },\n            onClick: formHandler,\n            children: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Form, \"Zgh0bFGqk0bOxhS6kJrXNqFZ5Mw=\", false, function () {\n  return [useHttpClient];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["D:/WEB_MINI_PROJECT/web/ReactJS/src/Hooks/Form.js"],"names":["React","useState","ErrorModel","LoadingSpinner","useHttpClient","Form","pass_error","seterror","isLoading","error","sendRequest","clearError","headers","header","setHeader","formHandler","event","preventDefault","title","document","getElementById","value","id","type","short","long","String","length","toLowerCase","data","JSON","stringify","err","textAlign"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAO,YAAP;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,SAASC,aAAT,QAA8B,aAA9B;;AAEA,MAAMC,IAAI,GAAC,MAAI;AAAA;;AACP,QAAM,CAACC,UAAD,EAAYC,QAAZ,IAAsBN,QAAQ,EAApC;AACA,QAAM;AAACO,IAAAA,SAAD;AAAWC,IAAAA,KAAX;AAAiBC,IAAAA,WAAjB;AAA6BC,IAAAA,UAA7B;AAAwCC,IAAAA;AAAxC,MAAiDR,aAAa,EAApE;AACA,QAAM,CAACS,MAAD,EAAQC,SAAR,IAAmBb,QAAQ,EAAjC;;AACF,QAAMc,WAAW,GAAC,MAAOC,KAAP,IAAe;AACjCA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMC,KAAK,GAAEC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,KAA9C;AACA,UAAMC,EAAE,GAAEH,QAAQ,CAACC,cAAT,CAAwB,IAAxB,EAA8BC,KAAxC;AACA,UAAME,IAAI,GAAEJ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,KAA5C;AACA,UAAMG,KAAK,GAAEL,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,KAA9C;AACA,UAAMI,IAAI,GAAEN,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,KAA5C;;AAEA,QAAGK,MAAM,CAACR,KAAD,CAAN,CAAcS,MAAd,KAAuB,CAA1B,EAA6B;AAC3BpB,MAAAA,QAAQ,CAAC,wBAAD,CAAR;AACAO,MAAAA,SAAS,CAAC,sBAAD,CAAT;AACA;AACD,KAJD,MAMK,IAAGY,MAAM,CAACH,IAAD,CAAN,CAAaI,MAAb,KAAsB,CAAzB,EAA2B;AAC9BpB,MAAAA,QAAQ,CAAC,uBAAD,CAAR;AACAO,MAAAA,SAAS,CAAC,sBAAD,CAAT;AACA;AACD,KAJI,MAMA,IAAG,EAAEY,MAAM,CAACH,IAAD,CAAN,CAAaK,WAAb,OAA6B,UAA7B,IAAyCF,MAAM,CAACH,IAAD,CAAN,CAAaK,WAAb,OAA6B,WAAtE,IAAmFF,MAAM,CAACH,IAAD,CAAN,CAAaK,WAAb,OAA6B,IAAlH,CAAH,EAA2H;AAC9HrB,MAAAA,QAAQ,CAAC,kDAAD,CAAR;AACAO,MAAAA,SAAS,CAAC,mBAAD,CAAT;AACA;AACD,KAJI,MAKA,IAAGY,MAAM,CAACJ,EAAD,CAAN,CAAWK,MAAX,KAAoB,CAAvB,EAAyB;AAC5BpB,MAAAA,QAAQ,CAAC,qBAAD,CAAR;AACQO,MAAAA,SAAS,CAAC,sBAAD,CAAT;AACA;AACT,KAJI,MAKA,IAAGY,MAAM,CAACF,KAAD,CAAN,CAAcG,MAAd,KAAuB,CAA1B,EAA4B;AAC/BpB,MAAAA,QAAQ,CAAC,oCAAD,CAAR;AACAO,MAAAA,SAAS,CAAC,sBAAD,CAAT;AACA;AACD;;AACD,QAAIe,IAAJ;;AACA,QAAG;AACDA,MAAAA,IAAI,GAAE,MAAMnB,WAAW,CACpB,qCADoB,EAErB,MAFqB,EAGrB;AAAC,wBAAe;AAAhB,OAHqB,EAIrBoB,IAAI,CAACC,SAAL,CAAe;AACPb,QAAAA,KAAK,EAACA,KADC;AAEPI,QAAAA,EAAE,EAACA,EAFI;AAGPC,QAAAA,IAAI,EAACA,IAHE;AAIPC,QAAAA,KAAK,EAACA,KAJC;AAKPC,QAAAA,IAAI,EAACA;AALE,OAAf,CAJqB,CAAvB;;AAYE,UAAGI,IAAI,KAAG,aAAV,EAAwB;AACtBtB,QAAAA,QAAQ,CAAC,gCAAD,CAAR;AACAO,QAAAA,SAAS,CAAC,uBAAD,CAAT;AACD;AACJ,KAjBD,CAkBA,OAAMkB,GAAN,EAAU,CAET;AAEF,GA3DC;;AA6DF,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,eACI1B,UAAU,iBAAI,QAAC,UAAD;AAAY,MAAA,MAAM,EAAEO,MAApB;AAA4B,MAAA,KAAK,EAAEP,UAAnC;AAA+C,MAAA,OAAO,EAAE,MAAI;AAACC,QAAAA,QAAQ;AAAG;AAAxE;AAAA;AAAA;AAAA;AAAA,YADlB,EAEKE,KAAK,iBAAI,QAAC,UAAD;AAAY,MAAA,MAAM,EAAEG,OAApB;AAA6B,MAAA,KAAK,EAAEH,KAApC;AAA2C,MAAA,OAAO,EAAEE;AAApD;AAAA;AAAA;AAAA;AAAA,YAFd,EAGKH,SAAS,iBAAI,QAAC,cAAD;AAAgB,MAAA,SAAS;AAAzB;AAAA;AAAA;AAAA;AAAA,YAHlB,eAIJ;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACF;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADE,eAIF;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,SAAS,EAAC,OAA7B;AAAqC,YAAA,EAAE,EAAC,OAAxC;AAAgD,YAAA,WAAW,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,SAAS,EAAC,OAA7B;AAAqC,YAAA,EAAE,EAAC,MAAxC;AAA+C,YAAA,WAAW,EAAC;AAA3D;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,SAAS,EAAC,OAA7B;AAAqC,YAAA,EAAE,EAAC,IAAxC;AAA6C,YAAA,WAAW,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,SAAS,EAAC,OAA7B;AAAqC,YAAA,EAAE,EAAC,OAAxC;AAAgD,YAAA,WAAW,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,kCACE;AAAU,YAAA,KAAK,EAAE;AAAC,wBAAS;AAAV,aAAjB;AAA+C,YAAA,EAAE,EAAC,MAAlD;AAAyD,YAAA,WAAW,EAAC;AAArE;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,SAAS,EAAC,MAAf;AAAsB,YAAA,KAAK,EAAE;AAACyB,cAAAA,SAAS,EAAC;AAAX,aAA7B;AAAmD,YAAA,OAAO,EAAElB,WAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJE;AAAA;AAAA;AAAA;AAAA;AAAA,YAJI;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH,CAzFD;;GAAMV,I;UAEyDD,a;;;KAFzDC,I;AA2FN,eAAeA,IAAf","sourcesContent":["import React,{useState} from \"react\";\r\nimport \"./Form.css\";\r\nimport ErrorModel from '../UIelements/Error';\r\nimport LoadingSpinner from '../UIelements/LoadingSpinner'\r\nimport { useHttpClient } from \"./Http-Hook\";\r\n\r\nconst Form=()=>{\r\n        const [pass_error,seterror]=useState();\r\n        const {isLoading,error,sendRequest,clearError,headers}=useHttpClient();\r\n        const [header,setHeader]=useState();        \r\n      const formHandler=async (event)=>{\r\n      event.preventDefault();\r\n\r\n      const title= document.getElementById('title').value;\r\n      const id= document.getElementById('id').value;\r\n      const type= document.getElementById('type').value;\r\n      const short= document.getElementById('short').value;\r\n      const long= document.getElementById('long').value;\r\n\r\n      if(String(title).length===0) {\r\n        seterror(\"Title can not be empty\")\r\n        setHeader(\"Please fill all data\")\r\n        return;\r\n      }\r\n      \r\n      else if(String(type).length===0){\r\n        seterror(\"Type can not be empty\")\r\n        setHeader(\"Please fill all data\")\r\n        return;\r\n      }\r\n      \r\n      else if(!(String(type).toLowerCase()===\"aptitude\"||String(type).toLowerCase()===\"technical\"||String(type).toLowerCase()===\"hr\")){\r\n        seterror(\"select course type between Aptitude/Technical/HR\")\r\n        setHeader(\"Course type error\")\r\n        return;\r\n      }\r\n      else if(String(id).length===0){\r\n        seterror(\"Id can not be empty\")\r\n                setHeader(\"Please fill all data\")\r\n                return;\r\n      }\r\n      else if(String(short).length===0){\r\n        seterror(\"Short Description can not be empty\")\r\n        setHeader(\"Please fill all data\")\r\n        return;\r\n      }\r\n      let data;\r\n      try{\r\n        data= await sendRequest(\r\n          `http://localhost:5000/course-upload`,\r\n          'POST',\r\n          {'Content-Type':'application/json'},\r\n          JSON.stringify({\r\n                  title:title,\r\n                  id:id,\r\n                  type:type,\r\n                  short:short,\r\n                  long:long\r\n          }));\r\n\r\n          if(data===\"successfull\"){\r\n            seterror(\"given course stored succefully\")\r\n            setHeader(\"Successfully Uploaded\")\r\n          }\r\n      }\r\n      catch(err){\r\n\r\n      }\r\n\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n           {pass_error && <ErrorModel header={header} error={pass_error} onClear={()=>{seterror()}}/>} \r\n            {error && <ErrorModel header={headers} error={error} onClear={clearError}/>}\r\n            {isLoading && <LoadingSpinner asOverlay/>}\r\n    <div className=\"wrapper\">\r\n  <div className=\"title\">\r\n    <h1>Add new Course</h1>\r\n  </div>\r\n  <div className=\"drive-form\">\r\n    <div className=\"input-fields\">\r\n      <input type=\"text\" className=\"input\" id=\"title\" placeholder=\"Title\"/>\r\n      <input type=\"text\" className=\"input\" id=\"type\" placeholder=\"Type (Aptitude/Technical/HR)\"/>\r\n      <input type=\"text\" className=\"input\" id=\"id\" placeholder=\"YouTube ID\"/>\r\n      <input type=\"text\" className=\"input\" id=\"short\" placeholder=\"Short description\"/>\r\n\r\n    </div>\r\n    <div className=\"msg\">\r\n      <textarea style={{\"border\":\"solid 1px white\"}} id=\"long\" placeholder=\"Additional Description (Optional)\"></textarea>\r\n      <div className=\"btns\" style={{textAlign:\"center\"}} onClick={formHandler}>submit</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n</React.Fragment>);\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}