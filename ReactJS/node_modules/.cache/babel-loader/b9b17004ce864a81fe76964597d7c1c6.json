{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nexport const useHttpClient = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const activeHttpRequests = useRef([]);\n  const sendRequest = useCallback(async (url, method = 'GET', headers = {}, body = null) => {\n    setIsLoading(true);\n    console.log(body);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      });\n      const responseData = await response.json();\n      activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrl);\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      console.log('dps' + err.message);\n      setError(err.message);\n      setIsLoading(false);\n      throw err;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  };\n};\n\n_s(useHttpClient, \"5LFg9Ro/5iGJ4ehzHD/qJSt5Ojo=\");","map":{"version":3,"sources":["D:/WEB_MINI_PROJECT/web/src/Hooks/Http-Hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","headers","body","console","log","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","err","clearError","forEach","abortCtrl","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AAEA,QAAMS,kBAAkB,GAAGP,MAAM,CAAC,EAAD,CAAjC;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAC7B,OAAOU,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,OAAO,GAAG,EAAtC,EAA0CC,IAAI,GAAG,IAAjD,KAA0D;AACxDR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,UAAMG,aAAa,GAAG,IAAIC,eAAJ,EAAtB;AACAT,IAAAA,kBAAkB,CAACU,OAAnB,CAA2BC,IAA3B,CAAgCH,aAAhC;;AAEA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACX,GAAD,EAAM;AAChCC,QAAAA,MADgC;AAEhCE,QAAAA,IAFgC;AAGhCD,QAAAA,OAHgC;AAIhCU,QAAAA,MAAM,EAAEN,aAAa,CAACM;AAJU,OAAN,CAA5B;AAOA,YAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B;AAEAhB,MAAAA,kBAAkB,CAACU,OAAnB,GAA6BV,kBAAkB,CAACU,OAAnB,CAA2BO,MAA3B,CAC3BC,OAAO,IAAIA,OAAO,KAAKV,aADI,CAA7B;;AAIA,UAAI,CAACI,QAAQ,CAACO,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUL,YAAY,CAACM,OAAvB,CAAN;AACD;;AAEDxB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOkB,YAAP;AACD,KApBD,CAoBE,OAAOO,GAAP,EAAY;AACZhB,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAMe,GAAG,CAACD,OAAtB;AAEAtB,MAAAA,QAAQ,CAACuB,GAAG,CAACD,OAAL,CAAR;AACAxB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMyB,GAAN;AACD;AACF,GAnC4B,EAoC7B,EApC6B,CAA/B;;AAuCA,QAAMC,UAAU,GAAG,MAAM;AACvBxB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD;;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX;AACAM,MAAAA,kBAAkB,CAACU,OAAnB,CAA2Bc,OAA3B,CAAmCC,SAAS,IAAIA,SAAS,CAACC,KAAV,EAAhD;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;AAOA,SAAO;AAAE9B,IAAAA,SAAF;AAAaE,IAAAA,KAAb;AAAoBG,IAAAA,WAApB;AAAiCsB,IAAAA;AAAjC,GAAP;AACD,CAzDM;;GAAM5B,a","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nexport const useHttpClient = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState();\r\n\r\n  const activeHttpRequests = useRef([]);\r\n\r\n  const sendRequest = useCallback(\r\n    async (url, method = 'GET', headers = {}, body = null) => {\r\n      setIsLoading(true);\r\n      console.log(body);\r\n      \r\n      const httpAbortCtrl = new AbortController();\r\n      activeHttpRequests.current.push(httpAbortCtrl);\r\n\r\n      try {\r\n        const response = await fetch(url, {\r\n          method,\r\n          body,\r\n          headers,\r\n          signal: httpAbortCtrl.signal\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        activeHttpRequests.current = activeHttpRequests.current.filter(\r\n          reqCtrl => reqCtrl !== httpAbortCtrl\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(responseData.message);\r\n        }\r\n\r\n        setIsLoading(false);\r\n        return responseData;\r\n      } catch (err) {\r\n        console.log('dps'+err.message);\r\n        \r\n        setError(err.message);\r\n        setIsLoading(false);\r\n        throw err;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\r\n    };\r\n  }, []);\r\n\r\n  return { isLoading, error, sendRequest, clearError };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}